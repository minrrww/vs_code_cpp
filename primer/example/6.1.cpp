//6.1 函数基础
/*1.一个典型的函数包括：返回类型（return type）、函数名字、
    由0个或多个形参（parameter）组成的列表以及函数体（function body）
  2.通过调用运算符（call operator）来执行函数。
    调用运算符的形式是一对圆括号，它作用与一个表达式，
    该表达式是函数或者指向函数的指针；
    圆括号之内是一个用逗号隔开的实参（argument）列表，
    我们用实参初始化函数的形参。
    调用表达式的类型就是函数的返回类型。
  3.调用函数完成两项工作：一是实参初始化函数对应的形参，
    二是将控制权转移给被掉用函数。
    此时，主调函数（calling function）的执行被暂时中断，
    被调函数（called function）开始执行。
  4.当遇到一条return语句时，完成两项工作：一是返回return语句中的值，
    二是将控制权从被掉函数转移回主调函数。
  5.形参和实参是对应关系，但没有规定实参的求值顺序。
  6.函数形参列表可以为空，但不能省略。
    形参列表中每个形参度含有一个声明符的声明，
    类型相同，也必须把两个类型都写出来。
    形参名是可选的，未命名的形参函数体不会使用它。
    是否设置未命名的形参不影响调用时提供的实参数量。
  7.函数的返回类型，一种特殊的返回类型是void，表示不返回任何值。
    函数返回类型不能是数组类型或函数类型，但可以是指向数组或函数的指针。*/
//6.1.1 局部对象
/*1.在C++中，名字有作用域，对象有生命周期（lifetime）。
    名字的作用域是程序文本的一部分，名字在其中可见。
    对象的生命周期是程序执行过程中该对象存在的一段时间。
  2.形参和函数体内部定义的变量统称为局部变量（local variable）。
    局部变量仅在函数的作用域内可见，
    同时局部变量还会隐藏（hide）在外层作用域中的同名的变量。
  3.把只存在于块执行期间的对象称为自动对象（automatic object）。
  4.内置类型的未初始化局部变量将产生未定义的值。
  5.局部静态对象（local static object）
    在程序的执行路径第一次经过对象定义语句初始化，直到程序终止。*/
//6.1.2 函数声明
/*1.函数可以声明多次，只能定义一次。
    函数声明无函数体，用一个分号代替，可以不写形参，写形参便于理解。
    函数的三要素，返回类型、函数名、形参类型描述了函数的接口，
    说明了调用该函数所需的全部信息。
    函数声明也称作函数原型（function prototype）。
  2.建议变量、函数在头文件中声明，在源文件中定义*/
//6.1.3 分离式编译（separate compilation）
//1.仔细阅读编译器的用户手册，弄清楚由多个文件组成的程序是如何编译并执行的
#include <iostream>
#include <cstddef>
using namespace std;
//编写函数
//val的阶乘是val*(val-1)*(val-2)...*(val-(val-1))*1
int fact(int val)
{
    int ret = 1; //局部变量，用于保存计算结果
    while (val > 1)
      ret *= val--; //把ret和val的乘积赋值给ret，然后将val减1
    return ret;     //返回结果
}
size_t conut_calls();//函数声明
size_t conut_calls()//函数定义
{
    static size_t ctr = 0; //调用结束后，这个值任然有效
    return ++ctr;
}
    int main()
{
    //调用函数
    int j = fact(5); //j等于120，即fact(5)的结果
    cout << "5! is " << j << endl;
    //等价于
    /*
    int val = 5; //用字面值5初始化val
    int ret = 1; //fact函数体内的代码
    while (val > 1)
        ret *= val--;
    int j = ret; //用ret的副本初始化j;
    */
    for (size_t i = 0; i != 10; ++i)
        cout << conut_calls() << endl;
    return 0;
}
