// 第九章 顺序容器
/*顺序容器（sequential container）为程序提供了控制元素存储和访问顺序的能力。*/
//9.1 顺序容器概述
/*顺序容器性能折中：
向容器添加或从容器删除元素的代价
非顺序访问容器中元素的代价
表9.1：顺序容器类型
vector 可变大小数组。支持快速随机访问。
       在尾部之外的位置插入或删除元素肯可能很慢。
deque  双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。
list   双向链表。只支持双向顺序访问。
       在list中任何位置进行插入/删除操作速度都很快。
forward_list  单项链表。只支持单向顺序访问。
       在链表任何位置进行插入/删除操作速度都很快。
array  固定大小数组。支持快速随机访问。不能添加户删除元素。
string 与vector相似的容器，但专门用于保存字符。随机访问快。
       在尾部插入/删除数度快。
c++程序应该使用标准库容器，而不是更原始点数据结构，如内置数组。

容器名称        固定大小  添加删除元素  存储元素方式  随机访问          扩张收缩  size
1.array         是        不支持        连续          支持              不支持    支持
2.vector        不        支持（尾部块）连续          支持              支持      支持
3.string        不        支持（尾部块）连续          支持              支持      支持
4.list          不        支持（块）    不连续        不（支持双向访问）支持      支持O(n)
5.forward_list  不        支持（块）    不连续        不（支持单向访问）支持      不支持
6.deque         不        支持（两端块）虚拟连续      支持              支持      支持

1.确定使用哪种顺序容器
vector是最好的选择，除非你有很好的理由选择其他容器。原则：
除非有很好的理由选择其他容器，否则应使用vector。
如果程序有很多小的元素，且空间的额外开销很重要，不要使用list或forward_list
如果程序要求随机访问元素，应使用vector或deque。
如果程序要求在容器但中间插入或删除元素，应使用list或forward_list。
如果程序需要在头尾位置插入或删除元素，但不会在中间位置进行插入或删除操作，则使用deque。
如果程序只有在读取输入时才需要在容器中间位置插入元素，随后需要随机访问元素，则
首先，确定是否真的需要在容器中间位置添加元素。
当处理输入数据时，通常可以很容易地向vector追加数据，
然后再调用标准库的sort函数来重排容器中的元素，
从而避免在中间位置添加元素。
如果必须在中间位置插入元素，考虑在输入阶段使用list，一旦输入完成，
将list中的内容拷贝到一个vector中。
如果程序既需要随机访问元素，又需要在容器中间位置插入元素。
占主导地位的操作决定容器类型的选择，或者测试应用的性能。
如果不确定应该使用哪种容器，可以在程序中使用vector和list公共操作：
使用迭代器，不使用下标，避免随机访问。
在必要时选择使用vector或list都很方便。*/

